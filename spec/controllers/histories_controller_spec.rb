require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe HistoriesController, type: :controller do
  before :each do
    admin_log_in
  end
  describe "GET #index" do

    it "populates an array of histories" do
      history = FactoryGirl.create(:history)
      get :index
      assigns(:histories).should eq([history])
    end
    it "renders the :index template" do
      get :index
      expect(response).to render_template :index
    end
  end
  
  describe "GET #show" do
      it "assigns the requested history to @histoy" do
          history = FactoryGirl.create(:history)
          get :show, params: { id: history.id}
          assigns(:history).should eq(history)
      end
      
      it "renders the :show template" do
          get :show, params: {id: FactoryGirl.create(:history)}
          expect(response).to render_template :show
      end
  end
  
  describe "GET #new" do
      it "assigns a new history to @history" do
          get :new
          assigns(:history).should be_a_new(History)
      end
      
      it "renders the :new template" do
          get :new
          expect(response).to render_template :new
      end
  end
  
  describe "GET#edit" do
      it "assigns the requested history to @history" do
          history = FactoryGirl.create(:history)
          get :show, params: { id: history.id}
          assigns(:history).should eq(history)
      end
      it "renders the :edit template" do
          get :edit, params: { id: FactoryGirl.create(:history)}
          expect(response).to render_template :edit
      end
  end
#Testing POST methods
    describe "POST#create" do
        context "with valid attributes" do
            it "creates a new history" do
                expect{
                    post :create, params:{ history: FactoryGirl.build(:history).attributes.except('id', 'created_at', 'updated_at')}
                }.to change(History,:count).by(1)
            end
            it "redirects to the new history" do
                post :create, params:{ history: FactoryGirl.build(:history).attributes.except('id', 'created_at', 'updated_at')}
                response.should redirect_to History.last
            end
        end
        context "with invalid attributes" do
            it "does not save the new history" do
                expect{
                    post :create, params:{ history: FactoryGirl.attributes_for(:invalid_history)}
                }.to_not change(History,:count)
            end
            it "re-renders the new methods" do
                post :create, params:{ history: FactoryGirl.attributes_for(:invalid_history)}
                response.should render_template :new
            end
        end
    end
#Testing PUT methods
    describe 'PUT update' do
        before :each do
            admin_log_in
            @history = FactoryGirl.create(:history)
        end
        
        context "valid attributes" do
            it "located the requested @history" do
                put :update, params: { id: @history, 
                    history: FactoryGirl.attributes_for(:history)}
                assigns(:history).should eq(@history)
            end
            
            it "changes @history's attributes" do
                put :update, params: { id: @history,
                    history: FactoryGirl.attributes_for(:history, checkOutTime: "2018-04-13 21:21:25")}
                @history.reload
                @history.checkOutTime.should eq("2018-04-13 21:21:25.000000000 -0500")
            end
            
            it "redirects to the updated history" do
                put :update, params: {id: @history,
                    history: FactoryGirl.attributes_for(:history)}
                    response.should redirect_to @history
            end
        end
        
        context "invalid attributes" do
            it "locates the requested @history" do
                put :update, params: {id: @history,
                    history: FactoryGirl.attributes_for(:invalid_history)}
                assigns(:history).should eq(@history)
            end
            
            it "does not change @history's attributes" do
                put :update, params: {id: @history,
                    history: FactoryGirl.attributes_for(:invalid_history, checkOutTime: "2018-04-13 21:21:25")}
                @history.reload
                @history.checkOutTime.should eq("2018-04-13 21:21:25.000000000 -0500")
            end
            
            it "re-renders the edit method" do
                put :update, params: {id: @history,
                    history: FactoryGirl.attributes_for(:invalid_history)}
                    response.should render_template :edit
            end
        end
    end
#Testing DELETE methods
    describe 'DELETE destroy' do
        before :each do
            @history = FactoryGirl.create(:history)
        end
        
        it "deletes the contact" do
            expect{
                delete :destroy, params:{ id: @history}
            }.to change(History,:count).by(-1)
        end
        
        it "redirects to contacts#index" do
            delete :destroy, params: { id: @history}
            response.should redirect_to histories_url
        end
    end
end
